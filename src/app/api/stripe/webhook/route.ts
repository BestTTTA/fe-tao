import { NextResponse } from "next/server";
import Stripe from "stripe";
import { createClient } from "@supabase/supabase-js";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2025-09-30.clover",
});

// ‡πÉ‡∏ä‡πâ service role ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ webhook ‡∏ï‡πâ‡∏≠‡∏á bypass RLS
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// ‚úÖ helper: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ end_at ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
function getEndAtFromPackageType(packageType?: string | null) {
  if (!packageType) return null;

  const now = new Date();

  if (packageType.toUpperCase() === "MONTH") {
    const d = new Date(now);
    d.setMonth(d.getMonth() + 1);
    return d.toISOString();
  }

  if (packageType.toUpperCase() === "YEAR") {
    const d = new Date(now);
    d.setFullYear(d.getFullYear() + 1);
    return d.toISOString();
  }

  // FREE ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  return null;
}

export async function POST(req: Request) {
  const sig = req.headers.get("stripe-signature");
  const body = await req.text();

  let event: Stripe.Event;

  // -------- verify stripe signature --------
  try {
    event = stripe.webhooks.constructEvent(
      body,
      sig!,
      process.env.STRIPE_WEBHOOK_SECRET!
    );
  } catch (err) {
    console.error("‚ö†Ô∏è Webhook signature failed:", err);
    return new NextResponse(`Webhook Error: ${err}`, { status: 400 });
  }

  // -------- main handler --------
  try {
    switch (event.type) {
      /* ===========================================================
       * 1) ONE-TIME CHECKOUT / PACKAGE PURCHASE (MONTH, YEAR)
       *    -> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á purchase_history ‡∏û‡∏£‡πâ‡∏≠‡∏° end_at
       *    -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï profiles (plan_type, plan_status, plan_current_period_end)
       * ===========================================================
       */
      case "checkout.session.completed": {
        const session = event.data.object as Stripe.Checkout.Session;

        const metadata = session.metadata ?? {};
        const userId = metadata.user_id;
        const priceId = metadata.price_id;
        const packageType = metadata.package_type; // ‡πÄ‡∏ä‡πà‡∏ô "MONTH" | "YEAR" | "FREE"

        console.log("‚úÖ checkout.session.completed", metadata);

        if (!userId || !priceId) {
          console.warn("‚ö†Ô∏è Missing metadata (userId / priceId):", metadata);
          break;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì end_at = ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (MONTH=+1‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, YEAR=+1‡∏õ‡∏µ)
        const endAt = getEndAtFromPackageType(packageType);

        // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (purchase_history)
        {
          const { error: insertError } = await supabase
            .from("purchase_history")
            .insert({
              user_id: userId,
              price_id: priceId,
              package_type: packageType || "FREE",
              stripe_checkout_session_id: session.id,
              stripe_payment_intent_id: session.payment_intent,
              status: "SUCCESS",

              // ‚úÖ ‡πÉ‡∏´‡∏°‡πà / ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏á purchase_history.end_at
              end_at: endAt ?? null,
            });

          if (insertError) {
            console.error("‚ùå Insert into purchase_history failed:", insertError);
          } else {
            console.log("‚úÖ purchase_history inserted with end_at:", endAt);
          }
        }

        // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô profiles (cache state ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á user)
        {
          const { error: profileError } = await supabase
            .from("profiles")
            .update({
              plan_type: packageType || "FREE",     // MONTH / YEAR / FREE
              plan_status: "active",               // ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> active
              plan_current_period_end: endAt ?? null, // ‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô UI ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            })
            .eq("id", userId);

          if (profileError) {
            console.error("‚ùå profiles update failed:", profileError);
          } else {
            console.log(
              "‚úÖ profiles updated for user:",
              userId,
              {
                plan_type: packageType || "FREE",
                plan_status: "active",
                plan_current_period_end: endAt ?? null,
              }
            );
          }
        }

        break;
      }

      /* ===========================================================
       * 2) RECURRING SUBSCRIPTION EVENTS
       *    (Stripe Subscriptions / Billing Portal)
       *    customer.subscription.created / updated
       * ===========================================================
       */
      case "customer.subscription.created":
      case "customer.subscription.updated": {
        const sub = event.data.object as Stripe.Subscription & {
          current_period_start?: number;
          current_period_end?: number;
        };

        const userId = sub.metadata?.user_id;
        const packageType = sub.metadata?.package_type ?? "FREE";
        if (!userId) break;

        // Stripe ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡∏ö‡∏¥‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô current_period_start / current_period_end (Unix ts)
        const currentPeriodStartIso = sub.current_period_start
          ? new Date(sub.current_period_start * 1000).toISOString()
          : null;

        const currentPeriodEndIso = sub.current_period_end
          ? new Date(sub.current_period_end * 1000).toISOString()
          : null;

        // 2.1 sync ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á subscriptions (optional cache / audit)
        {
          const { error: upsertError } = await supabase
            .from("subscriptions")
            .upsert({
              id: sub.id,
              user_id: userId,
              price_id: sub.items.data[0]?.price?.id,
              status: sub.status, // 'active', 'trialing', 'past_due', ...
              package_type: packageType,
              current_period_start: currentPeriodStartIso,
              current_period_end: currentPeriodEndIso,
            });

          if (upsertError) {
            console.error("‚ùå subscriptions upsert failed:", upsertError);
          } else {
            console.log("‚úÖ subscriptions upserted for:", userId, sub.id);
          }
        }

        // 2.2 update profiles -> ‡πÉ‡∏´‡πâ user ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        {
          const { error: profileError } = await supabase
            .from("profiles")
            .update({
              plan_type: packageType,               // ‡πÄ‡∏ä‡πà‡∏ô MONTH / YEAR ‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏≤‡∏î‡∏≤‡∏ï‡πâ‡∏≤
              plan_status: sub.status,              // active / trialing / past_due ...
              plan_current_period_end: currentPeriodEndIso, // Stripe billing period end
            })
            .eq("id", userId);

          if (profileError) {
            console.error("‚ùå profiles update for subscription failed:", profileError);
          } else {
            console.log("‚úÖ subscription profile synced for user:", userId);
          }
        }

        break;
      }

      /* ===========================================================
       * 3) SUBSCRIPTION CANCELED
       * ===========================================================
       */
      case "customer.subscription.deleted": {
        const sub = event.data.object as Stripe.Subscription;
        const userId = sub.metadata?.user_id;

        if (userId) {
          const { error: profileError } = await supabase
            .from("profiles")
            .update({
              plan_status: "canceled",
              // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö plan_type ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
              // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô FREE ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
              // plan_type: "FREE",
            })
            .eq("id", userId);

          if (profileError) {
            console.error("‚ùå profiles cancel update failed:", profileError);
          } else {
            console.log("‚ö†Ô∏è subscription canceled:", userId);
          }
        } else {
          console.warn("‚ö†Ô∏è subscription.deleted but userId missing in metadata");
        }

        break;
      }

      /* ===========================================================
       * 4) INVOICE / PAYMENT SIGNALS
       * ===========================================================
       */
      case "invoice_payment.paid":
      case "invoice.paid":
      case "invoice.payment_succeeded": {
        const invoice = event.data.object as Stripe.Invoice;
        console.log("üí∞ Invoice paid:", invoice.id);
        break;
      }

      /* ===========================================================
       * 5) NO-OP EVENTS
       * ===========================================================
       */
      case "charge.succeeded":
      case "payment_intent.succeeded":
      case "payment_method.attached":
      case "invoice.created":
      case "invoice.finalized": {
        console.log(`‚ÑπÔ∏è Ignored Stripe event type: ${event.type}`);
        break;
      }

      /* ===========================================================
       * 6) FALLBACK
       * ===========================================================
       */
      default:
        console.log(`‚ÑπÔ∏è Unhandled Stripe event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });
  } catch (err) {
    console.error("‚ùå Webhook handler failed:", err);
    return new NextResponse("Internal error", { status: 500 });
  }
}
